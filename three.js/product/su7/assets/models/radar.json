{"assets":{"geometries":{"79":{"type":"PlaneGeometry","isBufferGeometry":true,"attributes":{"position":1,"normal":2,"uv":3},"morphAttributes":{},"morphTargetsRelative":false,"groups":[],"drawRangeStart":0,"drawRangeCount":"Infinity","index":4}},"attributes":{"1":{"type":"BufferAttribute","isBufferAttribute":true,"name":"","arrayType":"Float32Array","array":[-0.05000000074505806,0.05000000074505806,0,0.05000000074505806,0.05000000074505806,0,-0.05000000074505806,-0.05000000074505806,0,0.05000000074505806,-0.05000000074505806,0],"itemSize":3,"normalized":false,"usage":35044,"_updateRange":{"offset":0,"count":-1}},"2":{"type":"BufferAttribute","isBufferAttribute":true,"name":"","arrayType":"Float32Array","array":[0,0,1,0,0,1,0,0,1,0,0,1],"itemSize":3,"normalized":false,"usage":35044,"_updateRange":{"offset":0,"count":-1}},"3":{"type":"BufferAttribute","isBufferAttribute":true,"name":"","arrayType":"Float32Array","array":[0,1,1,1,0,0,1,0],"itemSize":2,"normalized":false,"usage":35044,"_updateRange":{"offset":0,"count":-1}},"4":{"type":"BufferAttribute","isBufferAttribute":true,"name":"","arrayType":"Uint16Array","array":[0,2,1,2,3,1],"itemSize":1,"normalized":false,"usage":35044,"_updateRange":{"offset":0,"count":-1}},"5":{"type":"InstancedBufferAttribute","isInstancedBufferAttribute":true,"name":"","arrayType":"Float32Array","array":[1,0,0,0,0,1,0,0,0,0,1,0,0.6499999761581421,1.0399999618530273,-1.159999966621399,1,1,0,0,0,0,1,0,0,0,0,1,0,-0.3499999940395355,1.4299999475479126,-0.6899999976158142,1,1,0,0,0,0,1,0,0,0,0,1,0,1.0800000429153442,0.7200000286102295,-1.0099999904632568,1,1,0,0,0,0,1,0,0,0,0,1,0,1.9500000476837158,0.7599999904632568,-1,1,1,0,0,0,0,1,0,0,0,0,1,0,-1.659999966621399,1.340000033378601,0,1,1,0,0,0,0,1,0,0,0,0,1,0,-1.9500000476837158,0.5799999833106995,-1,1,1,0,0,0,0,1,0,0,0,0,1,0,0.3499999940395355,1.440000057220459,-0.07999999821186066,1,1,0,0,0,0,1,0,0,0,0,1,0,0.25999999046325684,1.4600000381469727,0,1,1,0,0,0,0,1,0,0,0,0,1,0,2.5299999713897705,0.44999998807907104,-0.6399999856948853,1,1,0,0,0,0,1,0,0,0,0,1,0,2.7300000190734863,0.4300000071525574,-0.30000001192092896,1,1,0,0,0,0,1,0,0,0,0,1,0,2.7799999713897705,0.4300000071525574,0,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.299999952316284,0.6700000166893005,-0.8799999952316284,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.7200000286102295,0.6800000071525574,0,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.690000057220459,0.6200000047683716,-0.4000000059604645,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.240000009536743,0.5299999713897705,-0.9399999976158142,1,1,0,0,0,0,1,0,0,0,0,1,0,0.6499999761581421,1.0399999618530273,1.159999966621399,1,1,0,0,0,0,1,0,0,0,0,1,0,-0.3499999940395355,1.4299999475479126,0.6899999976158142,1,1,0,0,0,0,1,0,0,0,0,1,0,1.0800000429153442,0.7200000286102295,1.0099999904632568,1,1,0,0,0,0,1,0,0,0,0,1,0,1.9500000476837158,0.7599999904632568,1,1,1,0,0,0,0,1,0,0,0,0,1,0,-1.9500000476837158,0.5799999833106995,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0.3499999940395355,1.440000057220459,0.07999999821186066,1,1,0,0,0,0,1,0,0,0,0,1,0,2.5299999713897705,0.44999998807907104,0.6399999856948853,1,1,0,0,0,0,1,0,0,0,0,1,0,2.7300000190734863,0.4300000071525574,0.30000001192092896,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.299999952316284,0.6700000166893005,0.8799999952316284,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.690000057220459,0.6200000047683716,0.4000000059604645,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.240000009536743,0.5299999713897705,0.9399999976158142,1,1,0,0,0,0,1,0,0,0,0,1,0,2.619999885559082,0.4300000071525574,0.4000000059604645,1,1,0,0,0,0,1,0,0,0,0,1,0,-2.690000057220459,0.6200000047683716,-0.4000000059604645,1],"itemSize":16,"normalized":false,"usage":35044,"_updateRange":{"offset":0,"count":-1},"meshPerAttribute":1}},"interleavedBuffers":{},"materials":{"1":{"blending":2,"side":0,"vertexColors":false,"opacity":1,"transparent":true,"blendSrc":204,"blendDst":205,"blendEquation":100,"blendSrcAlpha":null,"blendDstAlpha":null,"blendEquationAlpha":null,"depthFunc":3,"depthTest":true,"depthWrite":false,"stencilWriteMask":255,"stencilFunc":519,"stencilRef":0,"stencilFuncMask":255,"stencilFail":7680,"stencilZFail":7680,"stencilZPass":7680,"stencilWrite":false,"clippingPlanes":null,"clipIntersection":false,"clipShadows":false,"shadowSide":null,"colorWrite":true,"precision":null,"polygonOffset":false,"polygonOffsetFactor":0,"polygonOffsetUnits":0,"dithering":false,"alphaToCoverage":false,"premultipliedAlpha":false,"forceSinglePass":false,"toneMapped":true,"alphaTest":0,"type":"ShaderMaterial","isShaderMaterial":true,"uniforms":{"time":{"value":9.426942000000002},"opacity":{"value":1},"vColor":{"type":"c","value":16711422}},"vertexShader":"varying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vPositionW;\nvarying vec3 vNormalW;\nattribute vec3 color;\nvarying vec3 vColor;\nvarying vec4 viewerUV;\n\nvoid main() {\n    vPosition = position;\n    vNormal = normalMatrix * normal;\n    vPositionW = vec3( modelMatrix*vec4( position, 1.0 ));\n    vNormalW = normalize( vec3( vec4( normal, 0.0 ) * modelMatrix ) );\n    vUv = uv;\n    vColor=color;\n\n    #ifdef USE_INSTANCING\n      vPositionW = vec3(instanceMatrix * vec4(vPositionW,1.));\n      vPosition = vec3(instanceMatrix * vec4(vPosition,1.));\n    #endif\n\n    // 添加面向摄像机的代码\n    vec3 instancePosition = vec3(modelMatrix * vec4(vec3(0.),1.));\n    #ifdef USE_INSTANCING\n      instancePosition = vec3(instanceMatrix * vec4(vec3(0.),1.));\n    #endif\n\n    vec3 normalFace = vec3(0.,1.,0.);\n    vec3 cameraDir = normalize(cameraPosition.xyz - instancePosition);\n    vec3 vcV = normalize(cross( normalFace,cameraDir ));\n    vec3 vcU = normalize(cross( cameraDir,vcV ));\n    vec3 vcN = normalize(cross( vcV,vcU ));\n    mat3 viewMatrix = mat3( vcV, vcU, vcN );\n\n\n    float scale = 1.;\n    #ifdef USE_DISTANCE_SCALING\n      scale = pow(length(cameraPosition - instancePosition) / 50000., 0.8);\n    #endif\n\n    vec3 mvPosition = viewMatrix * vec3( position * scale);\n    #ifdef USE_INSTANCING\n      mvPosition.xyz += instancePosition;\n    #endif\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(mvPosition, 1.0);\n    viewerUV = vec4((gl_Position.xyz / gl_Position.w).xy* 0.5 + 0.5,0.,1.);\n}","fragmentShader":"\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vPositionW;\n    varying vec3 vNormalW;\n\n    uniform float time;\n    uniform float opacity;\n    uniform vec3 vColor;\n\n    void main() {\n        float distanceUV = length(vUv-vec2(0.5,0.5));\n        distanceUV = smoothstep(distanceUV,0.2,1.);\n        gl_FragColor = vec4(vec3(vColor),opacity*distanceUV);\n        // gl_FragColor = vec4(vec3(distanceP),1.);\n    }\n\n    ","linewidth":1,"wireframe":false,"wireframeLinewidth":1,"fog":false,"lights":false,"clipping":false}},"textures":{},"images":{}},"message":{"type":"Mesh","name":"","children":[],"up":[0,1,0],"position":[0,0,0],"rotation":[0,0,0,"XYZ"],"scale":[1,1,1],"layersMask":1,"castShadow":false,"receiveShadow":false,"frustumCulled":false,"renderOrder":0,"isMesh":true,"geometry":79,"material":1,"isInstancedMesh":true,"instanceMatrix":5,"count":28}}